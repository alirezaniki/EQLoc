#!/bin/bash

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Config
VM_Name="loc_vel_model"	# Velocity model name
AutoPick="False"		# Either to use Auto_Pick procedure or not (True/False)

Dept_Prob="True"		# Search for optimal depth? (True/False)
initDP="9"				# Initial Depth to explor the epicenter (km)
Depth1="7"				# Upper depth limit to search for the best depth (km)
Depth2="11"				# Lower depth limit to search for the best depth (km)
Depth_I="1"				# Depth intervals in depth optimization (km)

data_f="sac"			# Data file extention (SAC/sac; exactly same as the data extension)
S12_TD="7"				# Imagine that the actual time difference between the first and the second
						# closest stations is N. To boost the process, we omit all grid points in 
						# which the same criteria is outside the range N-S12_TD <= X >=  N+S12_TD

F1_P=5					# Band-Pass Filter lower corner
F2_P=7					# Band-Pass Filter upper corner						
						
PnPg_Th="190"			# Distance in km to declare between Pg and Pn
Init_Grid_In="0.5"		# Initial Search Grid Intervals (deg) (Grid center is on the closest station)
Radius="3"				# Search Radius (deg)
N_Iter="1"				# Number of grid search Iterations over the best grid point to maximize the location accuracy.	
						# 

LTA_P="20"				# LTA Window Length for sta/lta diagram (single character for < 10, e.g., 1,2,3 ..)
STA_P="1"				# STA Window Length for sta/lta diagram (single character for < 10)

#~~~~~~~~~~~~~~ Actual location of EQ (Only for GMT plot)
EVELAT="34.12"
EVELON="58.10"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ bODY sCript (Do not ChAnge)

Home=`dirname $(readlink -f "$0")`
input="$Home/Input"
VelModel="$Home/$VM_Name"	
Inc="0.5"


round ()
{
	echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*$1)+0.5)/(10^$2)" | bc))
}

deg2rad ()
{
	echo "scale=3; $1 * 0.01745329" | bc -l	
}

rad2deg ()
{
	echo "scale=3; $1 * 57.2957795" | bc -l 
}

time2sec ()
{
	sec=`date '+%s' --date="$1"`
	msc=`date '+%N' --date="$1"`
	echo "scale=2; $sec + ($msc / 1000000000)" | bc -l
}

Absolute ()
{
	echo "scale=1; sqrt ($1 * $1)" | bc -l
}

distance ()
{
	stlat=`deg2rad $1`
	stlon=`deg2rad $2`
	evela=`deg2rad $3`
	evelo=`deg2rad $4`
	lodif=`echo "$stlon - $evelo" | bc -l`

	DI=`echo "s ($evela) * s ($stlat) + c ($evela) * c ($stlat) * c ($lodif)" | bc -l`
	aD=`echo "3.14159 / 2 - a ($DI / sqrt (1 - $DI * $DI ))" | bc -l` && deg_aD=`rad2deg $aD`
	Dist=`echo "scale=2; $deg_aD * 60 * 1.15078 * 1.609344" | bc -l`
	echo `round $Dist 2`
}


Picker ()
{
	python - <<- END
		import warnings
		warnings.filterwarnings ('ignore')	

		from obspy import read
		from processing import sta_lta_div, normalization
		import datetime
		import numpy as np     

		st = read ('$data')
		tr = st[0].copy()
		stat = tr.stats.station
		netw = tr.stats.network
		chan = tr.stats.channel
		npts = tr.stats.npts
		start = tr.stats.starttime
		s_rate = int (tr.stats.sampling_rate)

		tr.detrend ("spline", order=3, dspline=500)
		tr.filter ('highpass', freq=$F1_P, corners=3, zerophase=True)
		tr.filter ('lowpass', freq=$F2_P, corners=3, zerophase=True)

		nsta = int ($STA_P * s_rate)
		nlta = int ($LTA_P * s_rate)

		tr_norm = normalization (tr)
		max = sta_lta_div (tr_norm, nsta, nlta)
		Psec = max / s_rate
		Pdate_time = start + datetime.timedelta (seconds = Psec)
		print (f'P phase arrival: {Pdate_time}')
		tr.stats.sac.o = Psec
		tr.write ('$data', format='SAC')		

	END
}


Cleaner () 
{
	cd $input
	[[ ! `ls *$data_f 2> /dev/null` ]] && echo "No seismic data found in input dir (check the input and data_f param!)" && exit
	ls -I "*$data_f" -I "*py" -I "__*" 2> /dev/null | xargs rm -f
}

p_picker () 
{
	[[ ! `ls *$data_f 2> /dev/null` ]] && echo "no $data_f data available! check the input dir" && exit
	for data in `ls *$data_f`; do
		echo -e "# Processing data:\n$data (Picking P phase)"
		Picker
	done	
}

grid ()
{
	cat /dev/null > Grids.dat
	GrdMinLat=`echo "scale=0; $Nearest_Lat - $Radius" | bc -l`
	GrdMaxLat=`echo "scale=0; $Nearest_Lat + $Radius" | bc -l`
	GrdMinLon=`echo "scale=0; $Nearest_Lon - $Radius" | bc -l`
	GrdMaxLon=`echo "scale=0; $Nearest_Lon + $Radius" | bc -l`
	
	for Glat in $(seq "$GrdMinLat" "$Init_Grid_In" "$GrdMaxLat"); do
		for Glon in $(seq "$GrdMinLon" "$Init_Grid_In" "$GrdMaxLon"); do
			echo "$Glat $Glon" >> Grids.dat
		done	
	done	
	cat Grids.dat >> All_Grds.dat
}

map ()
{
	GrdMinLon=`sort -n -k 2 $input/Grids.dat | head -1 | cut -f 2 -d " "`
	GrdMaxLon=`sort -n -k 2 $input/Grids.dat | tail -1 | cut -f 2 -d " "`
	GrdMinLat=`sort -n -k 1 $input/Grids.dat | head -1 | cut -f 1 -d " "`
	GrdMaxLat=`sort -n -k 1 $input/Grids.dat | tail -1 | cut -f 1 -d " "`
	StaMinLon=`sort -n -k 3 $input/stations.used | head -1 | cut -f 3 -d " "`
	StaMaxLon=`sort -n -k 3 $input/stations.used | tail -1 | cut -f 3 -d " "`
	StaMinLat=`sort -n -k 2 $input/stations.used | head -1 | cut -f 2 -d " "`
	StaMaxLat=`sort -n -k 2 $input/stations.used | tail -1 | cut -f 2 -d " "`
	(( `echo "$GrdMinLon <= $StaMinLon" | bc -l` ))	&& MapMinLon="$GrdMinLon" || MapMinLon="$StaMinLon"
	(( `echo "$GrdMaxLon >= $StaMaxLon" | bc -l` ))	&& MapMaxLon="$GrdMaxLon" || MapMaxLon="$StaMaxLon"
	(( `echo "$GrdMinLat <= $StaMinLat" | bc -l` ))	&& MapMinLat="$GrdMinLat" || MapMinLat="$StaMinLat"
	(( `echo "$GrdMaxLat >= $StaMaxLat" | bc -l` ))	&& MapMaxLat="$GrdMaxLat" || MapMaxLat="$StaMaxLat"	
	(( `echo "$EVELAT <= $MapMinLat" | bc -l` )) && MapMinLat=`echo "$EVELAT - 0.75" | bc -l`
	(( `echo "$EVELAT >= $MapMaxLat" | bc -l` )) && MapMaxLat=`echo "$EVELAT + 0.75" | bc -l`
	(( `echo "$EVELON <= $MapMinLon" | bc -l` )) && MapMinLon=`echo "$EVELON - 0.75" | bc -l`
	(( `echo "$EVELON >= $MapMaxLon" | bc -l` )) && MapMaxLon=`echo "$EVELON + 0.75" | bc -l`
	
	Lo1=`echo "$MapMinLon - 0.5" | bc -l`
	Lo2=`echo "$MapMaxLon + 0.5" | bc -l`
	La1=`echo "$MapMinLat - 0.5" | bc -l`
	La2=`echo "$MapMaxLat + 0.5" | bc -l`
	
	gmt pscoast -R$Lo1/$Lo2/$La1/$La2 -JM4i -Sgray -Xc -Yc -Gwhite -Ba -BWSen -K > Map.ps
	gmt psxy -R -J All_Grds.dat -Sc0.055c -Gblack -i1,0 -K -O >> Map.ps
	echo "$EVELON $EVELAT" | gmt psxy -R -J -Sa0.25 -Gred -i0,1 -K -O >> Map.ps
	gmt psxy -R -J stations.used -St0.25c -Gblack -i2,1 -K -O >> Map.ps
	cat Epicenter.dat | head -1 | gmt psxy -R -J -Sc0.25 -Gred -i1,0 -K -O >> Map.ps
	echo -e "\nFinal Earthquake Location:\n"	
	cat $input/Epicenter.dat	
}


vel_Reader ()
{
	cat /dev/null > $Home/.Velmodel.tvel
	sed -i '/^$/d' $VelModel
	read -a DP <<< `awk 'NR > 1 {print $1}' $VelModel | tr '\n' ' '`
	read -a VP <<< `awk 'NR > 1 {print $2}' $VelModel | tr '\n' ' '`
	read -a VS <<< `awk 'NR > 1 {print $3}' $VelModel | tr '\n' ' '`
	read -a DN <<< `awk 'NR > 1 {print $4}' $VelModel | tr '\n' ' '`
	
	echo -e "# Header Line\n# Header Line\n${DP[0]}  ${VP[0]}   ${VS[0]}   ${DN[0]}" > $Home/Velmodel.tvel
	for ((i=1; i<${#DP[@]}; i++)); do
		[[ -z ${DP[$i]} ]] || [[ -z ${VP[$i]} ]] || [[ -z ${VS[$i]} ]] && echo "Incomplete Velocity model!" && exit
		echo "${DP[$i]}  ${VP[$((i-1))]}   ${VS[$((i-1))]}   ${DN[$((i-1))]}" >> $Home/Velmodel.tvel
		echo "${DP[$i]}  ${VP[$i]}   ${VS[$i]}   ${DN[$i]}" >> $Home/.Velmodel.tvel
	done
}

Regression ()
{
	x=`awk '{print $3}' $1 | tr '\n' ', '`
	y=`awk '{print $4}' $1 | tr '\n' ', '`
	
	python - <<- END
		from scipy import stats
		import numpy as np
		X = np.array ([$x])
		Y = np.array ([$y])
		slope, intercept, r, _, _ = stats.linregress(X, Y)
		print (r ** 2)
	END
}

Real_Regression ()
{
	[[ ! -s  P_Arrivals.dat ]] && "No arrival time info! check the input data" && exit
	export Closest_Inf=`sort -k 3 P_Arrivals.dat | head -1`
	export SecondC_Inf=`sort -k 3 P_Arrivals.dat | head -2 | tail -1`
	export Third_Inf=`sort -k 3 P_Arrivals.dat | head -3 | tail -1`
	export Third_Sta=`echo $Third_Inf | awk '{print $NF}'`
	export Fourth_Inf=`sort -k 3 P_Arrivals.dat | head -4 | tail -1`
	export Fourth_Sta=`echo $Fourth_Inf | awk '{print $NF}'`	
	export Closest_Sta=`echo $Closest_Inf | awk '{print $NF}'`
	export SecondC_Sta=`echo $SecondC_Inf | awk '{print $NF}'`
	export Closest_Tme=`echo $Closest_Inf | awk '{print $3}'`
	export SecondC_Tme=`echo $SecondC_Inf | awk '{print $3}'`
	export Closest_TmS=`time2sec $Closest_Tme`
	export SecondC_TmS=`time2sec $SecondC_Tme`
	export Closest_Lat=`grep -w "$Closest_Sta" $Home/stations.dat | awk '{print $2}'`
	export Closest_Lon=`grep -w "$Closest_Sta" $Home/stations.dat | awk '{print $3}'`
	export SecondC_Lat=`grep -w "$SecondC_Sta" $Home/stations.dat | awk '{print $2}'`
	export SecondC_Lon=`grep -w "$SecondC_Sta" $Home/stations.dat | awk '{print $3}'`
	[[ -z "$Closest_Lat" ]] || [[ -z "$Closest_Lon" ]] \
		&& echo "No information found for The closest station < $Closest_Sta >!" && exit
	[[ -z "$SecondC_Lat" ]] || [[ -z "$SecondC_Lon" ]] \
		&& echo "No information found for The second closest station < $SecondC_Sta >!" && exit
	cat P_Arrivals.dat | sort -k 3 | while read info; do
		stname=`echo $info | awk '{print $NF}'`	
		[[ "$stname" = "$Closest_Sta" ]] && continue
		stlat=`grep -w "$stname" $Home/stations.dat | awk '{print $2}'`
		stlon=`grep -w "$stname" $Home/stations.dat | awk '{print $3}'`	
		[[ -z "$stlat" ]] || [[ -z "$stlon" ]] && continue
		dist=`distance $stlat $stlon $Closest_Lat $Closest_Lon`		
		sttime=`echo $info | awk '{print $3}'`
		sttimS=`time2sec $sttime`
		Tdiff=`echo "$sttimS - $Closest_TmS" | bc -l`
		echo "$Closest_Sta $stname $dist $Tdiff"
	done > dist_time.dat
	export Real_Slope=`Regression dist_time.dat`
}


Ttime ()
{
	python - <<- EOF
		from pyrocko import cake
		import numpy as np
		km = 1000.
		
		model = cake.load_model('$Home/Velmodel.tvel')
		source_depth = $Dep * km
		distance = np.array ([$1])* km * cake.m2d
		Phase = cake.PhaseDef ('$phase')
		for arrival in model.arrivals (distance, phases=Phase, zstart=source_depth):
		    print('%8g' % (arrival.t))

	EOF
}


Grid_Search ()
{
	cat Grids.dat | while read Ginfo; do
		Glat=`echo $Ginfo | awk '{print $1}'` && evela="$Glat"
		Glon=`echo $Ginfo | awk '{print $2}'` && evelo="$Glon"
		echo "Processing Grid point << Lat $Glat Lon $Glon >>"
		
		cat /dev/null > $Glon-$Glat.dat
		cat /dev/null > dist_tmp
		cat /dev/null > traveltimes.dat

		mindist=`distance $Closest_Lat $Closest_Lon $evela $evelo`
		dislimt=`echo "scale=2; $mindist - ($Init_Grid_In * 1.42 * 115)" | bc -l`	# deg ~ 115 km
		echo "Minimum allowed epicentral distance for the closest station is $dislimt." >> $Glon-$Glat.dat

		cat stations.used | while read Sinfo; do
			stnam=`echo $Sinfo | awk '{print $1}'` 
			stlat=`echo $Sinfo | awk '{print $2}'` 
			stlon=`echo $Sinfo | awk '{print $3}'` 
			dist=`distance $stlat $stlon $evela $evelo`
			#(( `echo "$dist < $dislimt" | bc -l` )) && echo "$stnam, $dist < $dislimt" >> $Glon-$Glat.dat && cat /dev/null > dist_tmp && break 
			echo "$stnam $dist" >> dist_tmp
		done 
		[[ ! -s dist_tmp ]] && continue	

		# Station order criteria
		S0=`sort -n -k 2 dist_tmp | cut -f 1 -d " " | head -1`
		S1=`sort -n -k 2 dist_tmp | cut -f 1 -d " " | head -2 | tail -1`
		S2=`sort -n -k 2 dist_tmp | cut -f 1 -d " " | head -3 | tail -1`
		S3=`sort -n -k 2 dist_tmp | cut -f 1 -d " " | head -4 | tail -1`
		echo -e "closest stations:\n$S0 $S1 $S2 $S3" >> $Glon-$Glat.dat
		echo -e "actual closest stations:\n$Closest_Sta" "$SecondC_Sta" "$Third_Sta" "$Fourth_Sta" >> $Glon-$Glat.dat

		list1=("$Closest_Sta" "$SecondC_Sta" "$Third_Sta" "$Fourth_Sta")
		list2=("$S0" "$S1" "$S2" "$S3")
		j=0
		for i in 0 1 2 3; do
			[[ ${list1[$i]} != ${list2[$i]} ]] && j=$((j+1))
		done	
		echo "j = $j" >> $Glon-$Glat.dat
		[[ $j -gt 2 ]] \
			&& echo "Grid point is far from the expected location, Skipping ..." >> $Glon-$Glat.dat && continue
		
		# time difference criteria
		timedif=`grep -w "$Closest_Sta $SecondC_Sta" dist_time.dat | cut -f 4 -d " "`
		t1=`echo "$timedif - $S12_TD" | bc -l`
		t2=`echo "$timedif + $S12_TD" | bc -l`
		echo "Time difference interval between $Closest_Sta and $SecondC_Sta must be $t1 to $t2 sec." >> $Glon-$Glat.dat
		Dep="$initDP"
		dist1="$mindist"
		dist2=`distance $SecondC_Lat $SecondC_Lon $evela $evelo`
		(( `echo "$dist1 < $PnPg_Th" | bc -l` )) && phase="p" || phase="P"
		T1=`Ttime $dist1 2> /dev/null` && T1=`echo $T1 | awk '{print $1}'`
		if [[ -z "$T1" ]]; then 
			[[ "$phase" = "p" ]] && phase="P" || phase="p"
			T1=`Ttime $dist1 2> /dev/null` && T1=`echo $T1 | awk '{print $1}'`
		fi
		(( `echo "$dist2 < $PnPg_Th" | bc -l` )) && phase="p" || phase="P"
		T2=`Ttime $dist2 2> /dev/null` && T2=`echo $T2 | awk '{print $1}'`
		if [[ -z "$T2" ]]; then 
			[[ "$phase" = "p" ]] && phase="P" || phase="p"
			T2=`Ttime $dist2 2> /dev/null` && T2=`echo $T2 | awk '{print $1}'`
		fi		
		if [[ -n "$T1" ]] && [[ -n "$T2" ]]; then
			DF=`echo "$T2 - $T1" | bc -l`
			echo "$Closest_Sta = $T1 s, $SecondC_Sta = $T2 s, Diff = $DF s" >> $Glon-$Glat.dat
			(( `echo "$DF < $t1" | bc -l` )) || (( `echo "$DF > $t2" | bc -l` )) && echo "Time criteria is not passed." >> $Glon-$Glat.dat && continue	
		else
			echo "insufficient travel time info for the closest stations, skipping the grid point .." >> $Glon-$Glat.dat && continue	
		fi
		
		i=0
		cat stations.used | while read Sinfo; do
			stnam=`echo $Sinfo | awk '{print $1}'`	
			dist=`grep -w "$stnam" dist_tmp | cut -f 2 -d " "` 
			(( `echo "$dist < $PnPg_Th" | bc -l` )) && phase="p" || phase="P"
			TT=`Ttime $dist 2> /dev/null` && TT=`echo $TT | awk '{print $1}'`
			if [[ -z "$TT" ]]; then 
				[[ "$phase" = "p" ]] && phase="P" || phase="p"
				TT=`Ttime $dist 2> /dev/null` && TT=`echo $TT | awk '{print $1}'`
			fi
			[[ -z $TT ]] && i+=1
			[[ $i -eq 2 ]] && echo "Two failures in travel time calculation. ignoring the grid." && break 2
			echo "distance to $stnam = $dist km, P_ttime = $TT" >> $Glon-$Glat.dat
			echo "$stnam $TT" >> traveltimes.dat
		done 		
		[[ ! -s traveltimes.dat ]] && echo "No synthetic travel-time calculated for grid point: $evela, $evelo. Skipped ..." && continue

		closest_st_ttime=`grep -w "$Closest_Sta" traveltimes.dat | cut -f 2 -d " "`
		[[ -z "$closest_st_ttime" ]] && echo "No synthetic T-time calculated for the actual nearest station (Grid: $evela, $evelo). Skipped ..." && continue
		
		cat traveltimes.dat | while read info; do
			stname=`echo $info | awk '{print $1}'`
			[[ "$stname" = "$Closest_Sta" ]] && continue
			sttime=`echo $info | awk '{print $2}'`
			diff=`echo "$sttime - $closest_st_ttime" | bc -l`
			dist=`grep -w "$stname" $input/dist_time.dat | cut -f 3 -d " "`
			echo "$Closest_Sta $stname $dist $diff"
		done > synt_tdiffs.dat	
			
		Syn_Slope=`Regression synt_tdiffs.dat`
		Slope_Diff=`echo "scale=6; $Real_Slope - $Syn_Slope" | bc -l` && Slope_Diff=`Absolute $Slope_Diff`
		echo "Misfit = $Slope_Diff" 
		echo "Misfit = $Slope_Diff" >> $Glon-$Glat.dat
		echo "$Glat $Glon $Slope_Diff" >> RMS.dat
	done	
	sort -n -k 3 $input/RMS.dat 2> /dev/null | head -1 > $input/Epicenter.dat	
	[[ ! -s $input/Epicenter.dat ]] && echo -e "Program Failed to Locate the Epicenter\nA more dense grid may be helpful." && exit 1

}

TT_Calculator ()
{
	cat $input/P_Arrivals.dat | while read info; do
		stnm=`echo $info | awk '{print $NF}'`
		stla=`grep -w "$stnm" $Home/stations.dat | awk '{print $2}'`
		stlo=`grep -w "$stnm" $Home/stations.dat | awk '{print $3}'`
		[[ -z "$stla" ]] || [[ -z "$stlo" ]] && continue
		echo "$stnm $stla $stlo"
	done > stations.used		
	
	Nearest_Lat="$Closest_Lat"
	Nearest_Lon="$Closest_Lon"			
	grid
	Dep="$initDP"
	Grid_Search
	
	N_Iter=${N_Iter%.*}
	while [[ "$N_Iter" -gt "0" ]]; do
		cat /dev/null > RMS.dat
		Nearest_Lat=`cut -f 1 -d " " Epicenter.dat`
		Nearest_Lon=`cut -f 2 -d " " Epicenter.dat`
		Radius=`echo "scale=1; $Radius / 2" | bc -l`
		Init_Grid_In=`echo "scale=1; $Init_Grid_In / 2" | bc -l`
		grid 
		Grid_Search
		N_Iter=$((N_Iter - 1))
	done	
}

Depth_BT ()
{
	evela=`awk 'NR==1 {print $1}' Epicenter.dat`
	evelo=`awk 'NR==1 {print $2}' Epicenter.dat`
	echo "Let's Probe the Depth ... "
	for Dep in $(seq "$Depth1" "$Depth_I" "$Depth2"); do
		echo "Assessing Depth $Dep posibility ..."	
		j=0
		cat stations.used | while read Sinfo; do
			stnam=`echo $Sinfo | awk '{print $1}'`
			stlat=`echo $Sinfo | awk '{print $2}'` 
			stlon=`echo $Sinfo | awk '{print $3}'` 				
			dist=`distance $stlat $stlon $evela $evelo` 
			(( `echo "$dist < $PnPg_Th" | bc -l` )) && phase="p" || phase="P"
			TT=`Ttime $dist 2> /dev/null` && TT=`echo $TT | awk '{print $1}'`
			if [[ -z "$TT" ]]; then 
				[[ "$phase" = "p" ]] && phase="P" || phase="p"
				TT=`Ttime $dist 2> /dev/null` && TT=`echo $TT | awk '{print $1}'`
			fi
			[[ -z $TT ]] && j+=1
			[[ $j -eq 2 ]] && echo "Two failures in travel time calculation. ignoring the Depth: $Dep." && break 2	
			echo "$stnam $TT" 
		done > traveltimes.dat	
		[[ ! -s traveltimes.dat ]] && echo "No synthetic travel-time calculated for Depth = $Dep. Skipped ..." && continue

		closest_st_ttime=`grep -w "$Closest_Sta" traveltimes.dat | cut -f 2 -d " "`
		[[ -z "$closest_st_ttime" ]] && echo "No synthetic T-time calculated for the actual nearest station in Depth: $Dep. Skipped ..." && continue
		
		cat traveltimes.dat | while read info; do
			stname=`echo $info | awk '{print $1}'`
			[[ "$stname" = "$Closest_Sta" ]] && continue
			sttime=`echo $info | awk '{print $2}'`
			diff=`echo "$sttime - $closest_st_ttime" | bc -l`
			dist=`grep -w "$stname" $input/dist_time.dat | cut -f 3 -d " "`
			echo "$Closest_Sta $stname $dist $diff"
		done > synt_tdiffs.dat	
			
		Syn_Slope=`Regression synt_tdiffs.dat`
		Slope_Diff=`echo "scale=5; $Syn_Slope - $Real_Slope" | bc -l` && Slope_Diff=`Absolute $Slope_Diff`
		echo "$Dep $Slope_Diff" >> Dep_RMS.dat
	done	
	echo Depth `sort -n -k 2 $input/Dep_RMS.dat 2> /dev/null | cut -f 1 -d " " | head -1` >> $input/Epicenter.dat	

}

[[ ! -d $Home/backup ]] && mkdir $Home/backup || rm -rf $Home/backup/*
cp $input/*$data_f $Home/backup 2> /dev/null

while getopts ":plhv" options; do
	case "${options}" in
		p)
			Cleaner
			p_picker 
			notify-send 'Code Completion' '\t\t Phase picking has been done!' 
			;;
		v)
			echo "Version 1.2.1" 
			;;
		h)
			message='''Usage:\n
				-p ) only execute the picking process\n
				-l ) run both picking and locating processes\n
				-v ) print version\n
				-h ) print this message'''	
			echo -e $message	
			;;
		l)
			Cleaner

			if [[ "$AutoPick" = "True" ]] || [[ "$AutoPick" = "true" ]]; then
				P_Picker
				for data in `ls *$data_f`; do
					PSec=`saclst A f $data | awk '{print $2}'` 
					(( `echo "$PSec == -12345" | bc -l` )) && continue
					evtm=`saclst KZTIME f $data | awk '{print $2}'` 
					stnm=`saclst KSTNM f $data | awk '{print $2}'` 		
					Ptme=`date --date "$evtm UTC +$PSec sec" "+%H:%M:%S"`
					echo "$data $PSec $Ptme $stnm" >> P_Arrivals.dat
				done				
			else
				for data in `ls *$data_f`; do
					PSec=`saclst o f $data | awk '{print $2}'` 
					(( `echo "$PSec == -12345" | bc -l` )) && continue
					evtm=`saclst KZTIME f $data | awk '{print $2}'` 
					stnm=`saclst KSTNM f $data | awk '{print $2}'` 		
					Ptme=`date --date "$evtm UTC +$PSec sec" "+%H:%M:%S"`
					echo "$data $PSec $Ptme $stnm" >> P_Arrivals.dat
				done
				[[ ! -s P_Arrivals.dat ]] && \
					echo 'No P arrivals has been set in sac data. run "bash Locator -p"' && exit
			fi

			vel_Reader
			Real_Regression
			TT_Calculator
			[[ "$Dept_Prob" = "True" ]] || [[ "$Dept_Prob" = "true" ]] && Depth_BT
			map
			notify-send 'Code Completion' '\t\tCode execution has been done!' 
			;;
		*)
			echo "invalid argument; use -h flag to see instruction" && exit 
			;;
			
	esac
done


[[ "$OPTIND" -eq 1 ]] && echo "needs an argument; use -h flag to see instruction" && shift $((OPTIND -1)) && exit
